
# ╔══════════════════════════════════════════════════════════════════════════════╗
# ║                                                                              ║
# ║                              REGISTRY FUNCTIONS                              ║
# ║                                                                              ║
# ╚══════════════════════════════════════════════════════════════════════════════╝


# ╭──────────────────────────────────────────────────────────╮
# │       Push the new image to the container registry       │
# ╰──────────────────────────────────────────────────────────╯
function push_to_registry()
{
    clear
    VUMP_IMAGE_NAME="$VUMP_IMAGE_NAME"
    IMAGE_ID=$(docker image ls -q --filter reference=${VUMP_IMAGE_NAME})

    printf "${TEXT_RED_500} (you must be logged in with 'docker login' or 'az login acr')${RESET_TEXT}\n\n"

    printf "The image $VUMP_IMAGE_NAME:latest will be pushed to the following locations:\n"
    printf "${ICON_CIRCLE} ${TEXT_GREEN_500}$VUMP_REGISTRY_REPO:latest ${RESET_TEXT} \n"
    printf "${ICON_CIRCLE} ${TEXT_GREEN_500}$VUMP_REGISTRY_REPO:$IMAGE_ID ${RESET_TEXT} \n\n"

    if [ -z "$NOPROMPT" ]; then
        confirmation "Do you want to push image to container registry?"
    fi
    
    printf "\n"

    # ╭──────────────────────────────────────────────────────────╮
    # │                    PUSH WITH :HASH_ID                    │
    # ╰──────────────────────────────────────────────────────────╯
    # Tag :IMAGE_ID
    echo "tag  ${VUMP_IMAGE_NAME}:latest ${VUMP_REGISTRY_REPO}:${IMAGE_ID}"
    if ! docker image tag ${VUMP_IMAGE_NAME}:latest ${VUMP_REGISTRY_REPO}:${IMAGE_ID};
    then
        printf "\n${TEXT_RED_500}Error: Failed to tag image with image ID.\n"
        exit 1
    fi

    # Push :IMAGE_ID
    PUSH_TAG="${IMAGE_ID}"
    spin "docker_push_to_registry" "pushing :${IMAGE_ID} to registry" "push to registry"

    # Delete from local images
    if ! docker image rm ${VUMP_REGISTRY_REPO}:${IMAGE_ID};
    then
        printf "\n${TEXT_RED_500}Error: Failed to remove ${VUMP_REGISTRY_REPO}:${IMAGE_ID}.\n"
        exit 1
    fi


    # ╭──────────────────────────────────────────────────────────╮
    # │                     PUSH WITH :LATEST                    │
    # ╰──────────────────────────────────────────────────────────╯

    # Tag :Latest
    if ! docker image tag ${VUMP_IMAGE_NAME}:latest ${VUMP_REGISTRY_REPO}:latest;
    then
        printf "\n${TEXT_RED_500}Error: Failed to tag image ${VUMP_IMAGE_NAME}:latest as ${VUMP_REGISTRY_REPO}:latest.\n"
        exit 1
    fi

    # Push :Latest
    PUSH_TAG="latest"
    spin "docker_push_to_registry" "pushing :latest to registry" "push to registry"

    # Delete from local images
    if ! docker image rm ${VUMP_REGISTRY_REPO}:latest;
    then
        printf "\n${TEXT_RED_500}Error: Failed to remove ${VUMP_REGISTRY_REPO}:latest.\n"
        exit 1
    fi

}


# Push to the registry.
function docker_push_to_registry()
{
    if ! docker push ${VUMP_REGISTRY_REPO}:${PUSH_TAG};
    then
        printf "\n${TEXT_RED_500}Error: Failed to push ${PUSH_REGISTRY}:${PUSH_TAG} to container registry.\n"
        exit 1
    fi
}





# ╭──────────────────────────────────────────────────────────────────────────────╮
# │                              PULL FROM REGISTRY                              │
# ╰──────────────────────────────────────────────────────────────────────────────╯

function pull_from_registry()
{
    printf "${TEXT_RED_500} (you must be logged in with 'docker login' or 'az login acr')${RESET_TEXT}\n\n"

    spin "docker_pull_from_registry" "importing" "Pull from registry"
}

# Pull from registry
function docker_pull_from_registry()
{
    if ! docker pull ${VUMP_REGISTRY_REPO}:${VUMP_PULL_TAG};
    then
        printf "\n${TEXT_RED_500}Error: Failed to pull ${PUSH_REGISTRY}:${VUMP_PULL_TAG} from container registry.\n"
        exit 1
    fi
}