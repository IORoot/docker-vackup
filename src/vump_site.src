#!/bin/bash
# ╭──────────────────────────────────────────────────────────────────────────────╮
# │                                                                              │
# │                                  VUMP SITE                                   │
# │                            Web files and Database                            │
# │                                                                              │
# ╰──────────────────────────────────────────────────────────────────────────────╯

# ╭──────────────────────────────────────────────────────────╮
# │                        VARIABLES                         │
# ╰──────────────────────────────────────────────────────────╯

VUMP_IMAGE_NAME="backup"

# ╭──────────────────────────────────────────────────────────╮
# │                                                          │
# │                      Read .env file                      │
# │                                                          │
# ╰──────────────────────────────────────────────────────────╯
if [ -f .env ]; then
    set -o allexport; source .env; set +o allexport
fi

# ╭──────────────────────────────────────────────────────────╮
# │                        UTILITIES                         │
# ╰──────────────────────────────────────────────────────────╯

source ./inc/stylesheet

source ./inc/registry_functions

source ./inc/docker_questions

source ./inc/menu_builder

source ./inc/spinner


# ╭──────────────────────────────────────────────────────────╮
# │                          USAGE                           │
# ╰──────────────────────────────────────────────────────────╯

usage()
{
    if [ "$#" -lt 1 ]; then

        cat <<EOF

    🚚 Vump Site

        This is a wrapper script around the vump tool. It quickly allows you to save and load to a container registry.

        It will extract the website code and database, put them into a backup docker-image and push to the registry.

        This caters for a general website container setup (like wordpress) where you have one container for the code
        and another for the database.

        [-l|--load]

        Automatically run the load command. No prompts. Use for backups / crons.

        [-s|--save]

        Automatically run the save command. No prompts. Use for backups / crons.


EOF

        exit 1
    fi
}


# ╭──────────────────────────────────────────────────────────╮
# │         Take the arguments from the command line         │
# ╰──────────────────────────────────────────────────────────╯
function arguments()
{
    POSITIONAL_ARGS=()

    while [[ $# -gt 0 ]]; do
    case $1 in

        -s|--save)
            SAVE="TRUE"
            shift
            ;;


        -n|--noprompt)
            LOAD="TRUE"
            shift
            shift
            ;;


        -*|--*)
            echo "Unknown option $1"
            exit 1
            ;;


        *)
            POSITIONAL_ARGS+=("$1") # save positional arg back onto variable
            shift                   # remove argument and shift past it.
            ;;
    esac
    done
    
}

# ╔══════════════════════════════════════════════════════════════════════════════╗
# ║                                                                              ║
# ║                                MENU FUNCTIONS                                ║
# ║                                                                              ║
# ╚══════════════════════════════════════════════════════════════════════════════╝

function mainmenu()
{

    if [ ! -z "$SAVE" ]; then
        NOPROMPT="TRUE"
        cmd_export_registry; 
        push_to_registry;
    elif [ ! -z "$LOAD" ]; then
        NOPROMPT="TRUE"
        cmd_import_registry; 
        exit
    else
        MENU='
            {
            "select": {
                "heading": "'${TEXT_YELLOW_500}'Select the task to perform.",
                "clear": true,
                "clear_before_command": true,
                "icon": "ICON_FADE_200",
                "hide_message": true,
                "display_help": true,
                "reset_loop": false,
                "previous_step": "exit",
                "options": [
                    {
                        "title": "Save ⏩ to container registry",
                        "title_style": "",
                        "description": "Backup docker website code, assets and database.",
                        "description_style": "TEXT_GRAY_500",
                        "command": "cmd_export_registry; push_to_registry; exit",
                        "bullet": "BORDER_SKY_400"
                    },
                    {
                        "title": "Load ⏪ from container registry",
                        "title_style": "",
                        "description": "Recover docker website code, assets and database.",
                        "description_style": "TEXT_GRAY_500",
                        "command": "cmd_import_registry; exit",
                        "bullet": "BORDER_EMERALD_400"
                    }
                ]
            }
        }'
        menu "$MENU"
    fi
}


# ╔══════════════════════════════════════════════════════════════════════════════╗
# ║                                                                              ║
# ║                            MAIN EXPORT FUNCTIONS                             ║
# ║                                                                              ║
# ╚══════════════════════════════════════════════════════════════════════════════╝


# ╭──────────────────────────────────────────────────────────╮
# │                   EXPORT TO REGISTRY                     │
# ╰──────────────────────────────────────────────────────────╯
function cmd_export_registry() {
    clear

    if [ -z ${VUMP_WEBSITE_VOLUME_NAME+x} ]; then 
        select_volume "Select WEBSITE volume to export data from [.env VUMP_WEBSITE_VOLUME_NAME]"
        VUMP_WEBSITE_VOLUME_NAME="$VOLUME"
    fi

    if [ -z ${VUMP_DATABASE_CONTAINER_NAME+x} ]; then 
        select_container "Select DATABASE container to export data from [.env VUMP_DATABASE_CONTAINER_NAME]"
        VUMP_DATABASE_CONTAINER_NAME="$CONTAINER"
    fi

    if [ -z ${VUMP_DB_USERNAME+x} ]; then 
        ask_question "database username?  [.env VUMP_DB_USERNAME]"
        VUMP_DB_USERNAME="$ANSWER"
    fi

    if [ -z ${VUMP_DB_PASSWORD+x} ]; then
        ask_question "$VUMP_DB_USERNAME database password? [.env VUMP_DB_PASSWORD]"
        VUMP_DB_PASSWORD="$ANSWER"
    fi

    if [ -z ${VUMP_DB_DATABASE+x} ]; then
        select_database "Select database to backup. [.env VUMP_DB_DATABASE]"
        VUMP_DB_DATABASE="$VUMP_DB_DATABASE"
    fi

    if [ -z ${VUMP_IMAGE_NAME+x} ]; then 
        ask_question "Name of container image to export to? [.env VUMP_IMAGE_NAME]"
        VUMP_IMAGE_NAME="$ANSWER"
    fi

    if [ -z ${VUMP_REGISTRY_REPO+x} ]; then 
        ask_question "Container registry to export to? [.env VUMP_REGISTRY_REPO]"
        VUMP_REGISTRY_REPO="$ANSWER"
    fi


    printf "The website data from '${VUMP_WEBSITE_VOLUME_NAME}' will be in /volume-data/\n"
    printf "The database data from '${VUMP_DATABASE_CONTAINER_NAME}' will be in /db-data/\n\n"
    
    if [ -z "$NOPROMPT" ]; then
        confirmation "You are going to export '${VUMP_WEBSITE_VOLUME_NAME}' and '${VUMP_DATABASE_CONTAINER_NAME}' to registry ${VUMP_REGISTRY_REPO}"
    fi
    
    spin "cmd_run_export_registry" "Exporting" "export_registry" 

}


function cmd_run_export_registry()
{

    # ╭──────────────────────────────────────────────────────────╮
    # │                         DATABASE                         │
    # ╰──────────────────────────────────────────────────────────╯

    vump --dbfile --container $VUMP_DATABASE_CONTAINER_NAME --database $VUMP_DB_DATABASE --username $VUMP_DB_USERNAME --password $VUMP_DB_PASSWORD --filename backup.sql

    # ╭──────────────────────────────────────────────────────────╮
    # │                         WEBSITE                          │
    # ╰──────────────────────────────────────────────────────────╯

    vump --save --volume $VUMP_WEBSITE_VOLUME_NAME --image $VUMP_IMAGE_NAME

    # ╭──────────────────────────────────────────────────────────╮
    # │                    COPY DB INTO IMAGE                    │
    # ╰──────────────────────────────────────────────────────────╯
    if ! docker run\
        -v "$PWD":/mount-pwd \
        $VUMP_IMAGE_NAME \
        /bin/sh -c "mkdir -p /db-data/ && cp -p /mount-pwd/backup.sql /db-data/backup.sql";
    then
        echo "Error: Failed to copy DB into container"
        exit 1
    fi

    CONTAINER_ID=$(docker ps -lq)

    docker commit -m "Saving website container" "$CONTAINER_ID" "$VUMP_IMAGE_NAME"

    docker container rm "$CONTAINER_ID"

    # ╭──────────────────────────────────────────────────────────╮
    # │                    EXPORT TO REGISTRY                    │
    # ╰──────────────────────────────────────────────────────────╯
    
}



# ╔══════════════════════════════════════════════════════════════════════════════╗
# ║                                                                              ║
# ║                            MAIN IMPORT FUNCTIONS                             ║
# ║                                                                              ║
# ╚══════════════════════════════════════════════════════════════════════════════╝


# ╭──────────────────────────────────────────────────────────╮
# │                   IMPORT TO REGISTRY                     │
# ╰──────────────────────────────────────────────────────────╯
function cmd_import_registry() {
    clear

    if [ -z ${VUMP_REGISTRY_REPO+x} ]; then 
        ask_question "Container registry to import from? [.env VUMP_REGISTRY_REPO]"
        VUMP_REGISTRY_REPO="$ANSWER"
    fi

    if [ -z ${VUMP_PULL_TAG+x} ]; then 
        ask_question "Which image :tag to pull? [.env VUMP_PULL_TAG]"
        VUMP_PULL_TAG="$ANSWER"
    fi

    if [ -z ${VUMP_WEBSITE_VOLUME_NAME+x} ]; then 
        select_volume "Select WEBSITE volume to export data from [.env VUMP_WEBSITE_VOLUME_NAME]"
        VUMP_WEBSITE_VOLUME_NAME="$VOLUME"
    fi

    if [ -z ${VUMP_DATABASE_CONTAINER_NAME+x} ]; then 
        select_container "Select DATABASE container to export data from [.env VUMP_DATABASE_CONTAINER_NAME]"
        VUMP_DATABASE_CONTAINER_NAME="$CONTAINER"
    fi

    if [ -z ${VUMP_DB_USERNAME+x} ]; then 
        ask_question "database username?  [.env VUMP_DB_USERNAME]"
        VUMP_DB_USERNAME="$ANSWER"
    fi

    if [ -z ${VUMP_DB_PASSWORD+x} ]; then
        ask_question "$VUMP_DB_USERNAME database password? [.env VUMP_DB_PASSWORD]"
        VUMP_DB_PASSWORD="$ANSWER"
    fi

    if [ -z ${VUMP_DB_DATABASE+x} ]; then
        select_database "Select database to backup. [.env VUMP_DB_DATABASE]"
        VUMP_DB_DATABASE="$VUMP_DB_DATABASE"
    fi

    printf "The website data in /volume-data/ will be put into the '${VUMP_WEBSITE_VOLUME_NAME}' volume.\n"
    printf "The database data in /db-data/ will be loaded into the '${VUMP_DATABASE_CONTAINER_NAME}' container.\n\n"
    
    if [ -z "$NOPROMPT" ]; then
        confirmation "Website backup from '${VUMP_REGISTRY_REPO}' will be loaded into '${VUMP_DATABASE_CONTAINER_NAME}' DB container and ${VUMP_WEBSITE_VOLUME_NAME} website volume."
    fi

    cmd_run_import_registry

}

function cmd_run_import_registry()
{
    
    # ╭──────────────────────────────────────────────────────────╮
    # │                    PULL FROM REGISTRY                    │
    # ╰──────────────────────────────────────────────────────────╯
    pull_from_registry

    vump --load --image $VUMP_REGISTRY_REPO:$VUMP_PULL_TAG --volume $VUMP_WEBSITE_VOLUME_NAME

    vump --dbload --image $VUMP_REGISTRY_REPO:$VUMP_PULL_TAG --container $VUMP_DATABASE_CONTAINER_NAME --database $VUMP_DB_DATABASE --username $VUMP_DB_USERNAME --password $VUMP_DB_PASSWORD
    rm ./backup.sql


}


stylesheet
usage "$@"
arguments "$@"
mainmenu
